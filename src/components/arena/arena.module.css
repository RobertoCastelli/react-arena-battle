/*************/
/* MAIN GRID */
/*************/
.arenaDisplay {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 0.2rem;
  grid-template-areas: "player score enemy";
}
.arenaPlayer {
  grid-area: player;
}
.arenaScore {
  grid-area: score;
}
.arenaEnemy {
  grid-area: enemy;
}

.arenaBackground {
  width: 100%;
  border: 0.5rem ridge bisque;
}

/***************/
/* PLAYER ENEMY*/
/***************/
.arenaPlayerWrapper,
.arenaEnemyWrapper {
  background-image: url("../../images/bg-stats.jpg");
  background-size: cover;
  background-repeat: no-repeat;
  display: flex;
  flex-direction: column;
  min-height: 40vh;
  text-align: center;
  border: 0.5rem ridge bisque;
  color: #333333;
}

.arenaPlayerContent,
.arenaEnemyContent {
  flex-grow: 1;
  position: relative;
}

.arenaPlayerAvatar {
  position: absolute;
  top: -240px;
  left: 25px;
  width: 150px;
}

.arenaPlayerMove {
  animation-name: move-right;
  animation-duration: 1s;
}

.arenaEnemyMove {
  animation-name: move-left;
  animation-duration: 1s;
}

.arenaPlayerAppear,
.arenaEnemyAppear {
  animation-name: appear;
  animation-duration: 3s;
  animation-iteration-count: 1;
}

.arenaEnemyAvatar {
  position: absolute;
  top: -240px;
  left: -20px;
  width: 200px;
}

.arenaPlayerImage,
.arenaEnemyImage {
  width: 80px;
  height: 80px;
  margin: 1rem auto 0;
  border: 0.3rem inset bisque;
}

.arenaPlayerStats,
.arenaEnemyStats {
  display: flex;
}

.arenaPlayerStats label,
.arenaEnemyStats label {
  margin: 0.8rem;
}

label {
  font-weight: bold;
}

progress {
  position: relative;
  -webkit-appearance: none;
  width: 90%;
  height: 15px;
  margin: 0.2rem auto;
}

progress:before {
  content: attr(data-label);
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  color: #333333;
  font-size: 1rem;
  font-weight: bold;
}

progress::-webkit-progress-bar {
  background: lightgray;
}

.arenaPlayerHealth::-webkit-progress-value,
.arenaEnemyHealth::-webkit-progress-value {
  background: tomato;
  transition: width 1s ease-in-out;
}

.arenaPlayerEnergy::-webkit-progress-value,
.arenaEnemyEnergy::-webkit-progress-value {
  background: orange;
  transition: width 1s ease-in-out;
}

/*********/
/* SCORE */
/*********/
.arenaScoreWrapper {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: repeat(3, auto);
  gap: 0.2rem;
  height: 40vh;
  grid-template-areas:
    "level"
    "info"
    "logs";
  text-align: center;
}
.arenaScoreLevel {
  grid-area: level;
}
.arenaScoreInfo {
  grid-area: info;
}
.arenaScoreLogs {
  grid-area: logs;
}

.arenaScoreLevel,
.arenaScoreInfo,
.arenaScoreLogs {
  background-image: url("../../images/bg-stats.jpg");
  background-size: cover;
  background-repeat: no-repeat;
  border: 0.5rem ridge bisque;
  color: #333333;
}

.arenaScoreNumber {
  background-color: #333333;
  color: white;
  font-size: 1rem;
  font-weight: bold;
  width: max-content;
  margin: auto;
  padding: 0.1rem 0.5rem;
  border: 0.2rem inset bisque;
}

.arenaScoreLogs div {
  margin: 0.5rem 0;
}

/***********/
/* BUTTONS */
/***********/
.arenaButtons {
  display: flex;
  justify-content: center;
}

.arenaBtnConfirm {
  transition: all 0.4s ease;
  border: 0.3rem outset #999999;
  background-color: #666666;
  color: antiquewhite;
  padding: 0.5rem;
  margin: 0 0.5rem 0.5rem 0;
  width: 100px;
  outline: none;
  text-transform: uppercase;
}

.arenaBtnCancel {
  transition: all 0.4s ease;
  border: 0.3rem outset rgb(185, 91, 91);
  background-color: brown;
  color: antiquewhite;
  padding: 0.5rem;
  margin: 0 0.5rem 0.5rem 0;
  width: 100px;
  outline: none;
  text-transform: uppercase;
}

.arenaBtnConfirm:hover {
  cursor: pointer;
  border: 0.3rem outset #666666;
  background-color: #333333;
}

.arenaBtnCancel:hover {
  cursor: pointer;
  border: 0.3rem outset cadetblue;
  background-color: teal;
}

@keyframes appear {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes move-right {
  0% {
    transform: translate(0);
  }
  50% {
    transform: translateX(100%);
  }
  0% {
    transform: translateX(0);
  }
}

@keyframes move-left {
  0% {
    transform: translate(0);
  }
  50% {
    transform: translateX(-100%);
  }
  0% {
    transform: translateX(0);
  }
}
